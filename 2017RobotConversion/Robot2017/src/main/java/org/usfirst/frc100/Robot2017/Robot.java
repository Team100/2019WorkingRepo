
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2017;

import edu.wpi.first.wpilibj.CameraServer;


import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


import org.usfirst.frc100.Robot2017.OI;
import org.usfirst.frc100.Robot2017.RobotMap;
import org.usfirst.frc100.Robot2017.commands.*;
import org.usfirst.frc100.Robot2017.subsystems.*;

import com.ctre.CANTalon.TalonControlMode;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;

    public static OI oi;
    public static Preferences prefs;
    public static DriveTrain driveTrain;
    public static BallHandling ballHandling;
    public static GearMech gearMech;
    public static PeterssUnbeatableScalingMechanismWithoutpNeumatics peterssUnbeatableScalingMechanismWithoutpNeumatics;
    public static Knewmatics knewmatics;
    public static double gameTime;
    
    public static final boolean robotWorks = false;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
    	prefs = Preferences.getInstance();
        driveTrain = new DriveTrain();
        ballHandling = new BallHandling();
        peterssUnbeatableScalingMechanismWithoutpNeumatics = new PeterssUnbeatableScalingMechanismWithoutpNeumatics();
        knewmatics = new Knewmatics();
        gearMech = new GearMech();
        gameTime = DriverStation.getInstance().getMatchTime();
        CameraServer.getInstance().startAutomaticCapture();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
     //   autonomousCommand = new AutoDrive(4);
        //autonomousCommand = new AutoDriveToPeg();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
    	if(RobotMap.leftFollower.getControlMode() != TalonControlMode.Follower){
    		RobotMap.leftFollower.changeControlMode(TalonControlMode.Follower);
    		RobotMap.leftFollower.set(3);
    		RobotMap.leftFollower.setSafetyEnabled(false);
    	}
    	if(RobotMap.rightFollwer.getControlMode() != TalonControlMode.Follower){
    		RobotMap.rightFollwer.changeControlMode(TalonControlMode.Follower);
    		RobotMap.rightFollwer.set(5);
    		RobotMap.rightFollwer.setSafetyEnabled(false);
    	}
        // schedule the autonomous command (example)
        if (autonomousCommand != null){
        	autonomousCommand.start();
        }
        int modeSelect = oi.selector();
       
		switch (modeSelect) {
		case 0:
			new AutoDriveToPeg().start();
			break;
		case 1: // rock wall
			// new AutonomousDriveForward(10, .5).start();
			new AutoDriveToPegOtherSide().start();
			// new AutonomousDriveForward(800, .558).start();
			break;
		case 2: // moat
			new StraightAuto().start();
			break;
		case 3:	
			new AutoDrive(3).start();
			break;
		
		default:
			
			break;
		}
        SmartDashboard.putNumber("Autonomous Mode" , modeSelect);
        new UpdateDashboard().start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
    	if(RobotMap.leftFollower.getControlMode() != TalonControlMode.Follower){
    		RobotMap.leftFollower.changeControlMode(TalonControlMode.Follower);
    		RobotMap.leftFollower.set(3);
    		RobotMap.leftFollower.setSafetyEnabled(false);
    	}
    	if(RobotMap.rightFollwer.getControlMode() != TalonControlMode.Follower){
    		RobotMap.rightFollwer.changeControlMode(TalonControlMode.Follower);
    		RobotMap.rightFollwer.set(5);
    		RobotMap.rightFollwer.setSafetyEnabled(false);
    	}
    	RobotMap.driveTrainLeftEncoder.reset();
    	RobotMap.driveTrainRightEncoder.reset();
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        new UpdateDashboard().start();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
       // driveTrain.driveRobot(oi.leftController, oi.rightController);
    	SmartDashboard.putNumber("joy value", -Robot.oi.leftController.getRawAxis(1));
    	SmartDashboard.putNumber("angle set", Robot.driveTrain.pidAngle.getSetpoint());
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
