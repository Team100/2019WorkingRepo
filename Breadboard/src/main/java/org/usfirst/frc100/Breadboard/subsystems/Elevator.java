// // RobotBuilder Version: 2.0
// //
// // This file was generated by RobotBuilder. It contains sections of
// // code that are automatically generated and assigned by robotbuilder.
// // These sections will be updated in the future when you export to
// // Java from RobotBuilder. Do not put any code or make any change in
// // the blocks indicating autogenerated code or it will be lost on an
// // update. Deleting the comments indicating the section will prevent
// // it from being updated in the future.

// package org.usfirst.frc100.Breadboard.subsystems;

// import com.ctre.phoenix.motorcontrol.ControlMode;
// import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

// import org.usfirst.frc100.Breadboard.Robot;
// import org.usfirst.frc100.Breadboard.commands.*;
// import edu.wpi.first.wpilibj.command.Subsystem;

// import org.usfirst.frc100.Breadboard.Constants;

// public class Elevator extends Subsystem {

//     WPI_VictorSPX victor10;
//     WPI_VictorSPX victor11;

//     public Elevator() {
//         victor10 = new WPI_VictorSPX(Constants.ELEVATOR_MASTER_CANID);
//         victor11 = new WPI_VictorSPX(Constants.ELEVATOR_FOLLOWER_CANID);

//         //Most likely won't be Master/Follower setup, but I was just playing around
//         victor11.follow(victor10);

//         victor10.setInverted(Constants.ELEVATOR_MASTER_INVERT);
//         victor11.setInverted(Constants.ELEVATOR_FOLLOWER_INVERT);
//     }

//     @Override
//     public void initDefaultCommand() {
//         // Set the default command for a subsystem here.
//         setDefaultCommand(new Elevate());
//     }

//     @Override
//     public void periodic() {
//         // Put code here to be run every loop
//     }

//     public void elevate() {
//         victor10.set(ControlMode.PercentOutput, Constants.ELEVATOR_MAX_MOTOR_OUTPUT*(-Robot.oi.getDual().getThrottle())+Constants.ELEVATOR_GRAVITY_COUNTER);
//     }

//     // Put methods for controlling this subsystem
//     // here. Call these from Commands.

// }

