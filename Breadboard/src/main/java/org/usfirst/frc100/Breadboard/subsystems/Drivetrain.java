// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Breadboard.subsystems;


import org.usfirst.frc100.Breadboard.Constants;
import org.usfirst.frc100.Breadboard.Robot;
import org.usfirst.frc100.Breadboard.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.InvertType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX leftMaster;
    private WPI_TalonSRX rightMaster;
    private DifferentialDrive differentialDrive1;
    private WPI_VictorSPX leftFollower;
    private WPI_VictorSPX rightFollower;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        leftMaster = new WPI_TalonSRX(Constants.DRIVE_TRAIN_LEFT_MASTER_CANID);
        
        
        
        rightMaster = new WPI_TalonSRX(Constants.DRIVE_TRAIN_RIGHT_MASTER_CANID);
        
        
        
        differentialDrive1 = new DifferentialDrive(leftMaster, rightMaster);
        addChild("Differential Drive 1",differentialDrive1);
        differentialDrive1.setSafetyEnabled(false);
        differentialDrive1.setExpiration(0.7);
        differentialDrive1.setMaxOutput(Constants.DRIVE_TRAIN_MAX_MOTOR_OUTPUT);

        
        leftFollower = new WPI_VictorSPX(Constants.DRIVE_TRAIN_LEFT_FOLLOWER_CANID);
        
        
        
        rightFollower = new WPI_VictorSPX(Constants.DRIVE_TRAIN_RIGHT_FOLLOWER_CANID);
        
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        leftFollower.follow(leftMaster);
        rightFollower.follow(rightMaster);

        leftMaster.setInverted(Constants.DRIVE_TRAIN_LEFT_MASTER_INVERT);
        leftFollower.setInverted(Constants.DRIVE_TRAIN_LEFT_FOLLOWER_INVERT);
        rightMaster.setInverted(Constants.DRIVE_TRAIN_RIGHT_MASTER_INVERT);
        rightFollower.setInverted(Constants.DRIVE_TRAIN_RIGHT_FOLLOWER_INVERT);
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Drive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        setDefaultCommand(new Drive());
    }

    public void drive(){
        /*
         * Use single stick of [LEFT] joystick for driving (X and Y axis)
         */
        differentialDrive1.arcadeDrive(-Robot.oi.getLeftStick().getY(), Robot.oi.getLeftStick().getX());
        
        /*
         * Use both left and right sticks for driving (L) Up+Down, (R) Left+Right
         */
        // differentialDrive1.arcadeDrive(Robot.oi.getLeftStick().getY(), Robot.oi.getLeftStick().getX());
    
    }

    public void pivotLeft(){
        leftMaster.set(ControlMode.PercentOutput, -1*Constants.DRIVE_TRAIN_PIVOT_MOTOR_OUTPUT);
        rightMaster.set(ControlMode.PercentOutput, Constants.DRIVE_TRAIN_PIVOT_MOTOR_OUTPUT);
    }
    public void pivotRight(){
        leftMaster.set(ControlMode.PercentOutput, Constants.DRIVE_TRAIN_PIVOT_MOTOR_OUTPUT);
        rightMaster.set(ControlMode.PercentOutput, -1*Constants.DRIVE_TRAIN_PIVOT_MOTOR_OUTPUT);
    }
    public void stop(){
        leftMaster.set(ControlMode.PercentOutput, 0);
        rightMaster.set(ControlMode.PercentOutput, 0);
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        //System.out.println("@@@@@SAFETY:: " + differentialDrive1.isSafetyEnabled());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

