/**
 * 
 */
package org.usfirst.frc100.Robot2018.commands;

import org.usfirst.frc100.Robot2018.Robot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.util.Timer;
import java.util.TimerTask;

import javax.management.RuntimeErrorException;

import org.usfirst.frc100.Robot2018.OI;
import org.usfirst.frc100.Robot2018.RobotMap;

import com.ctre.phoenix.motorcontrol.ControlMode;

/**
 * The rewrite of the Jaci Pathfinding <i>Black box</i>
 * 
 * This function takes an array of a path and then runs it. It is designed for
 * use of pre-run autonomus'.
 * 
 * @author Team100
 *
 */
public class PathfindingV2Issue4 extends Command {
	private boolean finished;
	private static double[][] path;
	private String currentMode;
	private long startTime;
	private int lengthOfPath;
	private static int lineInPath;
	private static double leftVelocity;
	private static double rightVelocity;
	private static double angle;	
	private PathfindingV2Issue4 runner = new PathfindingV2Issue4();
	Timer timer;
	public PathfindingV2Issue4() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

		requires(Robot.driveTrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	/**
	 * The code to process to process the desired autonomous
	 * 
	 * @param mode
	 */
	public PathfindingV2Issue4(String mode) {
		currentMode = mode;
		boolean modeFound = false;
		/*This compares the mode that is given to any available mode. Modes can be found in the constants file*/
		for(int i =  0; i < Constants.POSSIBLE_MODES.length; i++) {
			if(Constants.POSSIBLE_MODES[i].equals(mode)){
				modeFound = true;
			}
		}
		if(!modeFound) {
			throw new RuntimeErrorException(new Error("Unknown Path:" + mode));
		}
		/*This sets the PIDF values as defined in the constants file*/
		RobotMap.driveTrainRightMaster.config_kP(0, Constants.DRIVETRAIN_P, 10);
		RobotMap.driveTrainRightMaster.config_kI(0, Constants.DRIVETRAIN_I, 10); 
		RobotMap.driveTrainRightMaster.config_kD(0, Constants.DRIVETRAIN_D, 10);
		RobotMap.driveTrainRightMaster.config_kF(0, Constants.DRIVETRAIN_F, 10);

		RobotMap.driveTrainLeftMaster.config_kP(0, Constants.DRIVETRAIN_P, 10);
		RobotMap.driveTrainLeftMaster.config_kI(0, Constants.DRIVETRAIN_I, 10); 
		RobotMap.driveTrainLeftMaster.config_kD(0, Constants.DRIVETRAIN_D, 10);
		RobotMap.driveTrainLeftMaster.config_kF(0, Constants.DRIVETRAIN_F, 10);

	}

	/**
	 *Called just before this Command runs the first time
	 * This will find the path (function called from the Paths.java file and set a start time)
	 */
	@Override
	protected void initialize() {
		lineInPath = 0;
		finished = false;
		path = Paths.getPath(currentMode);
		/*This is a very long number becuase it is the time in milliseconds hence the long type*/
		startTime = System.currentTimeMillis();
		/*That path that is called can be found in the paths file*/
		lengthOfPath =  path.length;
		timer = new Timer();
		/*This makes the function execute the executePath method every 20 milliseconds*/
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				executePath();
			}
		}, 0, Constants.EXECUTION_LOOP_INTERVAL); // this number must match refresh rate
	}
	/**
	 * This method is run every x amount of milliseconds and controls the robot during the path.
	 */
	public void executePath(){
		// Get the velocities and angle from the Array
		leftVelocity = path[lineInPath][0];
		rightVelocity = path[lineInPath][1];
		angle = path[lineInPath][2];
		
		// Set the ramp rates for both sides
		RobotMap.driveTrainLeftMaster.configClosedloopRamp(Constants.RAMP_RATE_DRIVETRAIN, 0);
		RobotMap.driveTrainRightMaster.configClosedloopRamp(Constants.RAMP_RATE_DRIVETRAIN, 0);
		
		// Set the motors to their desired value
		RobotMap.driveTrainLeftMaster.set(ControlMode.Velocity, (rightVelocity * Constants.LEFT_DRIVETRAIN_MODIFIER) * Constants.DRIVETRAIN_TICKS_PER_METER);
		RobotMap.driveTrainRightMaster.set(ControlMode.Velocity, (leftVelocity * Constants.RIGHT_DRIVETRAIN_MODIFIER) * Constants.DRIVETRAIN_TICKS_PER_METER);
		lineInPath += 1;
		if(lineInPath >= lengthOfPath) {
			finished = true;
			timer.cancel();
		}
	}
	
	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute() {

	}

	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished() {
		return finished;
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
	}
}
