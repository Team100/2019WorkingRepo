// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc100.Robot2018.commands;
import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc100.Robot2018.Robot;
import org.usfirst.frc100.Robot2018.RobotMap;

import com.ctre.phoenix.motorcontrol.ControlMode;

/**
 *
 */
public class IntakeOut extends Command {


    private boolean doneThis;
    long StartTime; 

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	private boolean fin;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public IntakeOut() {
    	fin = false;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.intake);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	//new passTime(2);
    	doneThis = false;
    	StartTime = System.currentTimeMillis();

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {

    	if((System.currentTimeMillis() - StartTime)/1000 > (0.5)) { //1.0
    		doneThis = true;
    	} else {
    		RobotMap.intakeIntakeMaster.set(ControlMode.PercentOutput, -1);
    		RobotMap.intakeIntakeFollower.set(ControlMode.PercentOutput, 1);
    	}
    		/*
    	if(passTime.done) {
    		doneThis = true;
    		//System.out.println("hi");
    	}else{
    		RobotMap.intakeIntakeMaster.set(ControlMode.PercentOutput, 1);
    } */

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {

        return doneThis;

    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	RobotMap.intakeIntakeMaster.set(ControlMode.PercentOutput, 0);
    	RobotMap.intakeIntakeFollower.set(ControlMode.PercentOutput, 0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
