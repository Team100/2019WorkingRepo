/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import frc.robot.commands.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
  //// CREATING BUTTONS
  // One type of button is a joystick button which is any button on a joystick.
  // You create one by telling it which joystick it's on and which button
  // number it is.
  // Joystick stick = new Joystick(port);
  // Button button = new JoystickButton(stick, buttonNumber);
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  public JoystickButton turnToGoButton;
  public static Joystick rightJoystick;
  public static Joystick leftJoystick;
  public static JoystickButton shiftOff;
  public static JoystickButton turnPivot;
  public static JoystickButton moveAndTurn;
  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  public OI() {
      // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

      leftJoystick = new Joystick(1);
      
      rightJoystick = new Joystick(0);
      moveAndTurn = new JoystickButton(leftJoystick, 4);
      moveAndTurn.whileHeld(new PathfindingSimpler());
      shiftOff = new JoystickButton(leftJoystick, 2);
      shiftOff.whenPressed(new Shift());
      turnToGoButton = new JoystickButton(leftJoystick, 1);
      turnToGoButton.whenPressed(new PathFinder("forward"));
      turnToGoButton = new JoystickButton(leftJoystick, 3);
      turnToGoButton.whenPressed(new TurnRelative(10));

      // SmartDashboard Buttons

      // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public Joystick getRightJoystick() {
      return rightJoystick;
  }

  public Joystick getLeftJoystick() {
      return leftJoystick;
  }
  // There are a few additional built in buttons you can use. Additionally,
  // by subclassing Button you can create custom triggers and bind those to
  // commands the same as any other Button.

  //// TRIGGERING COMMANDS WITH BUTTONS
  // Once you have a button, it's trivial to bind it to a button in one of
  // three ways:

  // Start the command when the button is pressed and let it run the command
  // until it is finished as determined by it's isFinished method.
  // button.whenPressed(new ExampleCommand());

  // Run the command while the button is being held down and interrupt it once
  // the button is released.
  // button.whileHeld(new ExampleCommand());

  // Start the command when the button is released and let it run the command
  // until it is finished as determined by it's isFinished method.
  // button.whenReleased(new ExampleCommand());
}
